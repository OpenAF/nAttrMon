# oJob_nAttrMon.yaml __NAM_DEBUG=1 __NAM_NEED_CH_PERSISTENCE=
#ojob:
#  daemon: true

#todo:
#- nAttrMon Prepare shutdown
#- nAttrMon Init
#- nAttrMon ToDo
#- nAttrMon Start
#- nAttrMon Stop

jobs:
# -------------------------------
- name: nAttrMon Prepare shutdown
  type: shutdown
  exec: |
    global.nattrmon.stop();
    log("nAttrMon stopped.");
    print(new Date() + " | Stopping.");

# -------------------------
- name: nAttrMon Run Single
  from:
  - nAttrMon Start
  - nAttrMon Stop Single
  exec: |
    ["nattrmon::trigger", "nattrmon::lvals", "nattrmon::cvals", "nattrmon::attributes", "nattrmon::warnings", "nattrmon::plugs", "nattrmon::ps"]
    .filter(r => r.startsWith("nattrmon::"))
    .forEach(r => {
      global.nattrmon.debug("Waiting for " + r + "...");
      $ch(r).waitForJobs();
      sleep(50, true);
    });
    global.nattrmon.debug("Stopping...");
    global.nattrmon.stop();
    log("nAttrMon stopped.");
    print(new Date() + " | Stopping.");

# -------------------
- name: nAttrMon Stop
  exec: |
    $ch()
    .list()
    .filter(r => r.startsWith("nattrmon::"))
    .forEach(r => {
      global.nattrmon.debug("Waiting for " + r + "...");
      $ch(r).waitForJobs();
    });
    global.nattrmon.debug("Stopping...");
    exit(0);

- name: teste
  lang: python
  exec: |
    from datetime import datetime

    now = datetime.now()

    current_time = now.strftime("%H:%M:%S")
    args['set'] = { "Test": current_time }

# -------------------
- name: nAttrMon ToDo
  deps: nAttrMon Init
  to  : nAttrMon Add Plugs
  args:
    - input :
       name    : Test
       execJob : teste
          
    - input:
        name    : Test 2
        exec    : |
          sleep(2500, true);
          return { "Test2": "coisos" }

    - output:
        name       : Output test
        chSubscribe: nattrmon::cvals
        exec       : |
          _$(args.v, "args.v").$_();
          yprint(args.v);
    # - output:
    #     name    : Output JSON
    #     execFrom: nOutput_HTTP_JSON
    #     execArgs:
    #       port: 8888

    # - output:
    #     name    : Output HTTP
    #     execFrom: nOutput_HTTP
    #     execArgs:
    #       port : 8888
    #       title: Test

# ----------------------------
- name    : nAttrMon Add Plugs
  typeArgs:
    single: true
  exec    : |
    var fnJob = j => {
      if (isMap(j) && isDef(j.execJob) && isUnDef(j.exec)) {
        j.exec  = "var r = $job('teste', args);\n";
        j.exec += "if (isMap(r)) {\n";
        j.exec += "   if (isDef(r.set)) {\n";
        j.exec += "      r = r.set;\n";
        j.exec += "   } else {\n";
        j.exec += "     delete r.objId; delete r.__id; delete r.execid;\n";
        j.exec += "   };\n";
        j.exec += "} return r;\n";
      }

      return j;
    };

    if (isDef(args.output)) {
      args.output = fnJob(args.output);
      var r = global.nattrmon.loadObject(args.output, "output");
      global.nattrmon.addOutput(r, r.exec);
    }
    if (isDef(args.input)) {
      args.input = fnJob(args.input);
      if (isUnDef(args.input.timeInterval) && isUnDef(args.input.chSubscribe) && isUnDef(args.input.cron)) {
        args.input.chSubscribe = "nattrmon::trigger";
      }
      var r = global.nattrmon.loadObject(args.input, "input");
      global.nattrmon.addInput(r, r.exec);
    }
    if (isDef(args.validation)) {
      args.validation = fnJob(args.validation);
      var r = global.nattrmon.loadObject(args.validation, "validation");
      global.nattrmon.addValidation(r, r.exec);
    }

# --------------------
- name: nAttrMon Start
  deps: nAttrMon Init
  exec: |
    global.nattrmon.debug("nAttrMon exec input plugs");
    global.nattrmon.execPlugs(global.nattrmon.PLUGINPUTS);
    global.nattrmon.debug("nAttrMon exec output plugs");
    global.nattrmon.execPlugs(global.nattrmon.PLUGOUTPUTS);
    global.nattrmon.debug("nAttrMon exec validation plugs");
    global.nattrmon.execPlugs(global.nattrmon.PLUGVALIDATIONS);

    global.nattrmon.debug("nAttrMon restoring snapshot");
    log("nAttrMon started (main=" + global.NATTRMON_HOME + "; home=" + global.NATTRMON_SUBHOME + ").");

    $ch("nattrmon::trigger").set(1, 1);

# -------------------
- name: nAttrMon Init
  exec: |
    global.NATTRMON_HOME = args.NATTRMON_HOME || getEnv("NATTRMON_HOME");
    if (isUnDef(global.NATTRMON_HOME)) global.NATTRMON_HOME = getOPackPath("nAttrMon") || ".";
    global.NATTRMON_SUBHOME = args.NATTRMON_DIR || getEnv("NATTRMON_DIR");
    if (isUnDef(global.NATTRMON_SUBHOME)) global.NATTRMON_SUBHOME = args.withHome || global.NATTRMON_HOME;

    loadLib(global.NATTRMON_HOME + "/lib/nmain.js");

    if (isDef(args.__NAM_LOGHK_HOWLONGAGOINMINUTE)) global.__NAM_LOGHK_HOWLONGAGOINMINUTE = Number(args.__NAM_LOGHK_HOWLONGAGOINMINUTE);
    if (isDef(args.__NAM_LOGAUDIT)) global.__NAM_LOGAUDIT = Boolean(args.__NAM_LOGAUDIT);
    if (isDef(args.__NAM_LOGAUDIT_TEMPLATE)) global.__NAM_LOGAUDIT_TEMPLATE = String(args.__NAM_LOGAUDIT_TEMPLATE);
    if (isDef(args.__NAM_JAVA_ARGS)) global.__NAM_JAVA_ARGS = String(args.__NAM_JAVA_ARGS).split(",");
    if (isDef(args.__NAM_MAXPLUGEXECUTE_TIME)) global.__NAM_MAXPLUGEXECUTE_TIME = Number(args.__NAM_MAXPLUGEXECUTE_TIME);
    if (isDef(args.__NAM_BUFFERCHANNELS)) global.__NAM_BUFFERCHANNELS = Boolean(args.__NAM_BUFFERCHANNELS);
    if (isDef(args.__NAM_BUFFERBYNUMBER)) global.__NAM_BUFFERBYNUMBER = Number(args.__NAM_BUFFERBYNUMBER);
    if (isDef(args.__NAM_BUFFERBYTIME)) global.__NAM_BUFFERBYTIME = Number(args.__NAM_BUFFERBYTIME);
    if (isDef(args.__NAM_NUMBER_WORKERS)) __cpucores = Number(args.__NAM_NUMBER_WORKERS);
    if (isDef(args.__NAM_COREOBJECTS)) global.__NAM_COREOBJECTS = String(args.__NAM_COREOBJECTS);
    if (isDef(args.__NAM_COREOBJECTS_LAZYLOADING)) global.__NAM_COREOBJECTS_LAZYLOADING = Boolean(args.__NAM_COREOBJECTS_LAZYLOADING);
    if (isDef(args.__NAM_DEBUG)) global.__NAM_DEBUG = Boolean(args.__NAM_DEBUG);
    if (isDef(args.__NAM_NEED_CH_PERSISTENCE)) global.__NAM_NEED_CH_PERSISTENCE = Boolean(args.__NAM_NEED_CH_PERSISTENCE);
    if (isDef(args.__NAM_LOGCONSOLE)) global.__NAM_LOGCONSOLE = Boolean(args.__NAM_LOGCONSOLE); else global.__NAM_LOGCONSOLE = false;
    if (isDef(args.__NAM_LOG_ASYNC)) __logFormat.async = Boolean(args.__NAM_LOG_ASYNC); else global.__NAM_LOG_ASYNC = true;
    if (isDef(args.__NAM_MAXPLUGEXECUTE_TIME)) global.__NAM_MAXPLUGEXECUTE_TIME = Number(args.__NAM_MAXPLUGEXECUTE_TIME);

    if (isUnDef(args.withDirectory)) {
      global.nattrmon = new nAttrMon(global.NATTRMON_SUBHOME + "/config", global.__NAM_DEBUG);
    } else {
      global.nattrmon = new nAttrMon(args.withDirectory, global.__NAM_DEBUG);
    }

    global.nattrmon.debug("nAttrMon start load plugs");
    global.nattrmon.loadPlugs();

    $ch("nattrmon::trigger").create();